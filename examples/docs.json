{
   "docs":{
      "stage":{
         "properties":{
            "container":{
               "description":"Indica l'elemento div del contenitore principale.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"HTML div element",
               "id":"propcontainer",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "children":{
               "description":"Indica la lista dei figli del parente.",
               "default":"an empty array list",
               "constructor":"",
               "note":"presente in Stage e <a href=\"docsprite.php\">Sprite</a> di SOLA LETTURA",
               "type":"Array",
               "id":"propchildren",
               "param":"",
               "example":"",
               "return":"",
               "explane":"L'array è gestito dai metodi add e remove."
            }
         },
         "methods":{
            "getLoopList":{
               "description":"Restituisce la lista di funzioni presenti nel processo di esecuzione dell'impianto RequestAnimationFrame.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgetlooplist",
               "param":"",
               "example":"",
               "return":"Array",
               "explane":"L'array è gestito dai ,metodi addLoop e removeLoop."
            },
            "start":{
               "description":"Avvia l'esecuzione di RequestAnimationFrame nel caso in cui sia presente almeno una funzione nella lista dei processi.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metstart",
               "param":"",
               "example":"",
               "return":"void",
               "explane":"Il metodo viene ad essere necessario nel caso in cui si sia precedentemente fermato il processo."
            },
            "stop":{
               "description":"Interrompe l'esecuzione di RequestAnimationFrame senza eliminare le funzioni nella lista dei processi.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metstop",
               "param":"",
               "example":"",
               "return":"void",
               "explane":""
            },
            "reset":{
               "description":"Azzera tutte le proprietà che compongono i metodi dell'impianto RequestAnimationFrame.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metreset",
               "param":"",
               "example":"",
               "return":"void",
               "explane":""
            },
            "getFrame":{
               "description":"Restituisce il numero corrente di frame, o di battute, eseguite.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgetframe",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getTime":{
               "description":"Restituisce il tempo corrente generato da un oggetto 'Date.getTime()', ad ogni battuta, ovvero, ogni volta che la funzione in loop viene eseguita.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgettime",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getFps":{
               "description":"Restituisce il numero di fotogrammi al secondo attualmente disponibili.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgetfps",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getTimeInterval":{
               "description":"Restituisce l'effetiva differenza tra il tempo corrente ed il tempo attuale.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgettimeinterval",
               "param":"",
               "example":"timeInterval=(thisTime-lastTime)",
               "return":"Number",
               "explane":""
            },
            "addLoop":{
               "description":"Aggiunge una funzione alla lista di processi in esecuzione.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metaddloop",
               "param":"",
               "example":"myStage.addLoop(target,func)",
               "return":"void",
               "explane":"Il processo verra avviato non appena il metodo avrà inserito nella lista la funzione da eseguire."
            },
            "removeLoop":{
               "description":"Rimuove una funzione dalla lista dei processi in esecuzione.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metremoveloop",
               "param":"",
               "example":"myStage.removeLoop(target)",
               "return":"void",
               "explane":"Il processo viene interrotto non appena il metodo avrà eliminato la funzione dalla lista."
            },
            "add":{
               "description":"Aggiunge un elemento all'oggetto chiamante.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metadd",
               "param":"Uno <a href=\"docsprite.php\">Sprite</a>.",
               "example":"myElement.add(myObj)",
               "return":"void",
               "explane":""
            },
            "remove":{
               "description":"Rimuove un elemento precedentemente inserito.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metremove",
               "param":"Uno <a href=\"docsprite.php\">Sprite</a>.",
               "example":"myElement.remove(myObj)",
               "return":"void",
               "explane":""
            }
         },
         "constructor":{
            "Stage":{
               "description":"Inizializza l'oggetto Stage.",
               "constructor":"Stage(container,width,height)",
               "default":"null",
               "note":"",
               "type":"Function",
               "id":"constage",
               "param":"L'id di un HTML Div element e due valori numerici per l'altezza e la larghezza dello Stage.",
               "example":"var stage=new Canvas2d.Stage(\"container\",800,600)",
               "return":"Canvas2d.Stage Object",
               "explane":"Questo è il primo elemento che deve essere inizializzato. Al suo avvio verrà creato un oggetto \"rqanim\" in window, che servirà come impianto RequestAnimationFrame per tutte le istanze di Stage e Tweener."
            }
         }
      },
      "sprite":{
         "properties":{
            "children":{
               "description":"Indica la lista dei figli del parente.",
               "default":"an empty array list",
               "constructor":"",
               "note":"presente in <a href=\"docstage.php\">Stage</a> e Sprite di SOLA LETTURA",
               "type":"Array",
               "id":"propchildren",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "parent":{
               "description":"Indica il parente dell'oggetto.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"Object",
               "id":"propparent",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "canvas":{
               "description":"Indica l'elemento canvas a cui fa riferimento.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"HTML Canvas element",
               "id":"propcanvas",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "ctx":{
               "description":"Indica il context2d dell'elemento canvas a cui fa riferimento.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"context2d",
               "id":"propctx",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "stage":{
               "description":"Indica il contenitore principale di è figlio l'oggetto.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"Object",
               "id":"propparent",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            }
         },
         "methods":{
            "add":{
               "description":"Aggiunge un elemento all'oggetto chiamante.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metadd",
               "param":"un DisplayObjects.",
               "example":"myElement.add(myObj)",
               "return":"void",
               "explane":""
            },
            "remove":{
               "description":"Rimuove un elemento precedentemente inserito.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Function",
               "id":"metremove",
               "param":"un DisplayObjects..",
               "example":"myElement.remove(myObj)",
               "return":"void",
               "explane":""
            }
         }
      },
      "displayobjects":{
         "properties":{
            "localX":{
               "description":"Indica la coordinata locale x.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proplocalx",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da tutti gli oggetti."
            },
            "localY":{
               "description":"Indica la coordinata locale y.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proplocaly",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da tutti gli oggetti."
            },
            "radius":{
               "description":"Indica l'ampiezza del raggio.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"propradius",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#concircle'>circle</a> e <a href='#conroundrect'>roundRect</a>."
            },
            "startAngle":{
               "description":"Indica il radiante di partenza per l'arco di un cerchio.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"propstartangle",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#concircle'>circle</a>."
            },
            "endAngle":{
               "description":"Indica il radiante di arrivo per l'arco di un cerchio.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"propendangle",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#concircle'>circle</a>."
            },
            "backGround":{
               "description":"Indica un oggetto per la composizione di un colore di fondo per il testo.",
               "default":"undefined",
               "constructor":"background={ color: value, linecolor: value, linewidth: number)",
               "note":"",
               "type":"Object",
               "id":"propbackground",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "paddingLeft":{
               "description":"Indica l'offset orizzontale per il riempimento di un'immagine o del testo.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proppaddingleft",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#conimg'>img</a>, <a href='#conclip'>clip</a>, <a href='#context'>text</a>."
            },
            "paddingTop":{
               "description":"Indica l'offset verticale per il riempimento di un'immagine o del testo.",
               "default":"",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proppaddingtop",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#conimg'>img</a>, <a href='#conclip'>clip</a>, <a href='#context'>text</a>."
            },
            "fontType":{
               "description":"Indica la famiglia di font per il carattere.",
               "default":"Verdana",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"propfonttype",
               "param":"",
               "example":"myText.fontType='Verdana, Times';",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "fontSize":{
               "description":"Indica la dimensione del carrattere.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"propfontsize",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "fontWeight":{
               "description":"Indica il tipo di stile del carattere.",
               "default":"normal",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"propfontweight",
               "param":"I valori accettati sono: normal, bolt, italic.",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "align":{
               "description":"Indica il tipo di allineamento orizzontale del testo.",
               "default":"center",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"propalign",
               "param":"",
               "example":"I valori possibili sono: start, end, center, left, right.",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "baseLine":{
               "description":"Indica il tipo di allineamento verticale del testo.",
               "default":"alphabetic",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"propbaseline",
               "param":"I valori possibili sono: top, hanging, middle, alphabetic, ideographic, bottom.",
               "example":"",
               "return":"",
               "explane":"Utilizzato da <a href='#context'>text</a>."
            },
            "lineAlpha":{
               "description":"Indica il grado di trasparenza della linea.",
               "default":"1",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proplinealpha",
               "param":"Un valore compreso tra 0 e 1.",
               "example":"",
               "return":"",
               "explane":""
            },
            "color":{
               "description":"Indica il colore di riempimento dell'oggetto.",
               "default":"black",
               "constructor":"",
               "note":"",
               "type":"Value",
               "id":"propcolor",
               "param":"I valori accettati sono: rgb, hsl, hsv, hex e name.",
               "example":"",
               "return":"",
               "explane":"Per ulteriori informazioni <a href='docstyle.php'>Colors</a>."
            },
            "lineColor":{
               "description":"Indica il colore della linea dell'oggetto.",
               "default":"null",
               "constructor":"",
               "note":"",
               "type":"Value",
               "id":"proplinecolor",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Per ulteriori informazioni <a href='docstyle.php'>Colors</a>."
            },
            "type":{
               "description":"Indica il tipo di oggetto.",
               "default":"",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"String",
               "id":"proptype",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "lineWidth":{
               "description":"Indica lo spessore della linea.",
               "default":"2",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proplinewidth",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "lineJoin":{
               "description":"Indica il tipo di congiunzione di più linee.",
               "default":"miter",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"proplinejoin",
               "param":"I valori accettati sono: bevel, round, miter.",
               "example":"",
               "return":"",
               "explane":""
            },
            "lineCap":{
               "description":"Indica il tipo di finale di una linea.",
               "default":"butt",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"proplinecap",
               "param":"I valori accettati sono: butt, round, square.",
               "example":"",
               "return":"",
               "explane":""
            },
            "lineMiter":{
               "description":"Indica a quale altezza avverrà la congiunzione di due righe.",
               "default":"10",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"proplinemiter",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "gradient":{
               "description":"Definisce le proprietà di un gradiente come colore di fondo.",
               "default":"null",
               "constructor":"gradient={ offset: array, color: array,type: string, coord: object}.<br>Type linear coord:{ x0, y0, x1, y1}.<br>Type radial coord:{ x0, y0, r0, x1, y1, r1)",
               "note":"",
               "type":"Object",
               "id":"propgradient",
               "param":"",
               "example":"var linearGradient={'offset':[0,1],'color':[color,color],'type':'linear','coord':{'x0':0,'y0':0,'x1':30,'y1':30}); var radialGradient={'offset':[0,1],'color':[color,color],'type':'radial','coord':{'x0':0,'y0':0,'r0':0,'x1':30,'y1':30,'r1':15}); myObject.gradient=linearGradient|radialGradient;",
               "return":"",
               "explane":""
            },
            "lineGradient":{
               "description":"Definisce le proprietà di un gradiente come colore di una linea.",
               "default":"null",
               "constructor":"lineGradient={ offset: array, color: array,type: string, coord: object}.<br>Type linear coord:{ x0, y0, x1, y1}.<br>Type radial coord:{ x0, y0, r0, x1, y1, r1)",
               "note":"",
               "type":"Object",
               "id":"proplinegradient",
               "param":"",
               "example":"var linearGradient={'offset':[0,1],'color':[color,color],'type':'linear','coord':{'x0':0,'y0':0,'x1':30,'y1':30}); var radialGradient={'offset':[0,1],'color':[color,color],'type':'radial','coord':{'x0':0,'y0':0,'r0':0,'x1':30,'y1':30,'r1':15}); myObject.lineGradient=linearGradient|radialGradient;",
               "return":"",
               "explane":""
            },
            "shadow":{
               "description":"Definisce le proprietà di un'ombreggiatura per il riempimento di un oggetto.",
               "default":"null",
               "constructor":"shadow=( color: value offsetX: number, offsetX: number, blur: number)",
               "note":"",
               "type":"Object",
               "id":"propshadow",
               "param":"",
               "example":"var shadow={ color: value offsetX: number, offsetX: number, blur: number); myObject.shadow=shadow;",
               "return":"",
               "explane":""
            },
            "lineShadow":{
               "description":"Definisce le proprietà di un'ombreggiatura per la linea di un oggetto.",
               "default":"null",
               "constructor":"lineShadow={ color: value offsetX: number, offsetX: number, blur: number)",
               "note":"",
               "type":"Object",
               "id":"proplineshadow",
               "param":"",
               "example":"var shadow={ color: value offsetX: number, offsetX: number, blur: number); myObject.lineShadow=shadow;",
               "return":"",
               "explane":""
            },
            "points":{
               "description":"Indica una lista di punti usati per costruire un'oggetto polygon.",
               "default":"null",
               "constructor":"points=[ [.2 numbers.], [..], ... ]",
               "note":"",
               "type":"Array",
               "id":"proppoints",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Viene utilizzato da <a href='#conpolygon'>polygon</a>."
            },
            "obj":{
               "description":"Indica una lista di oggetti che definiscono un'oggetto shape.",
               "default":"",
               "constructor":"obj=[{prop: [...]}, {prop: [...]}, {prop: [...]}, ..]",
               "note":"",
               "type":"Array",
               "id":"propobj",
               "param":"Ogni oggetto nella lista specificherà un suo metodo di costruzione della figura, fornendo un array di coordinate. I metodi possibili sono: moveTo, lineTo, quadraticCurveTo, bezierCurveTo e arcTo(attualmento non supportato da Opera)",
               "example":"",
               "return":"",
               "explane":"Viene utilizzato da <a href='#conshape'>shape</a>."
            },
            "txt":{
               "description":"Indica la stringa di testo utilizzata da text.",
               "default":"An empty string",
               "constructor":"",
               "note":"",
               "type":"String",
               "id":"proptxt",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Viene utilizzato da <a href='#context'>text</a>."
            },
            "show":{
               "description":"Indica un valore booleano utilizzato da img e clip.",
               "default":"true",
               "constructor":"",
               "note":"",
               "type":"Boolean",
               "id":"propshow",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Questo valore determina se l'immagine di clip|img dovrà essere disegnata immediatamente dopo il caricamento. Viene utilizzato da <a href='#conimg'>img</a> e <a href='#conclip'>clip</a>."
            },
            "frameList":{
               "description":"Definisce l'oggetto che conterrà tutte le informazioni di ritaglio dell'immagine per clip.",
               "default":"null",
               "constructor":"framelist=[ { x: number, y: number, map:{ x: number, y: number, width: number, height: number}}, {..}]",
               "note":"",
               "type":"Array",
               "id":"propframelist",
               "param":"Gli elementi richiesti per ogni oggetto sono: x y che corrispondono alle coordinate locali e \"map\" un oggetto che richiede quattro parametri per il ritaglio dell'immagine; x y le coordinate di partenza e width height, quanto grande sarà il ritaglio.",
               "example":"var framelist=[{'x':0,'y':0,'map':{'x':10,'y':10,'width':25,'height':30},{'x':0,'y':0,'map':{'x':10,'y':40,'width':25,'height':30},etc...]; myClip.clip(x,y,source,framelist,show);",
               "return":"",
               "explane":"Una volta inizializzato l'oggetto sarà di sola lettura. Viene utilizzato da <a href='#conclip'>clip</a>."
            },
            "currentFrame":{
               "description":"Indica l'indice corrente della lista framelist per l'oggetto clip.",
               "default":"0",
               "constructor":"",
               "note":"",
               "type":"Number",
               "id":"propcurrentframe",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Modificando l'indice frameList si richiamerà il ritaglio dell'immagine corrispondente nella lista frameList. Una volta inizializzato l'oggetto sarà di sola lettura. Viene utilizzato da <a href='#conclip'>clip</a>."
            },
            "source":{
               "description":"Indica l'elemento o la posizione dell'immagine riferita ad un'oggetto img o clip.",
               "default":"null",
               "constructor":"",
               "note":"di SOLA LETTURA",
               "type":"String or HTML Image element",
               "id":"propsource",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Una volta inizializzato l'oggetto sarà di sola lettura. Viene utilizzato da <a href='#conimg'>img</a> e <a href='#conclip'>clip</a>."
            },
            "image":{
               "description":"Indica l'elemento HTML Image element dell'oggetto img o clip.",
               "default":"",
               "constructor":"",
               "note":"può essere sostituito anche dopo l'inizializzazione dell'oggetto img o clip.",
               "type":"HTML Image element or String base64",
               "id":"propimage",
               "param":"",
               "example":"",
               "return":"",
               "explane":"Viene utilizzato da <a href='#conimg'>img</a> e <a href='#conclip'>clip</a>."
            }
         },
         "methods":{
            "setColor":{
               "description":"Assegna un colore di riempimento all'oggetto.",
               "default":"",
               "constructor":"setColor( color)",
               "note":"",
               "type":"Function",
               "id":"metsetcolor",
               "param":"Un valore a piacere nei seguenti formati: rgb, hsl, hsv, hex, name o un array in formato rgb.",
               "example":"",
               "return":"void",
               "explane":"Un modo sicuro per settare il colore di riempimento."
            },
            "setLineColor":{
               "description":"Assegna un colore alla linea di contorno dell'oggetto.",
               "default":"",
               "constructor":"setLineColor( linecolor)",
               "note":"",
               "type":"Function",
               "id":"metgetlinecolor",
               "param":"Un valore a piacere nei seguenti formati: rgb, hsl, hsv, hex, name o un array in formato rgb.",
               "example":"",
               "return":"void",
               "explane":"Un modo sicuro per settare il colore della linea."
            },
            "getColor":{
               "description":"Restituisce il colore di riempimento dell'oggetto.",
               "default":"",
               "constructor":"getColor( string)",
               "note":"",
               "type":"Function",
               "id":"metgetcolor",
               "param":"Un valore a piacere nei seguenti formati: rgb, hsl, hsv, hex o name.",
               "example":"myObject.getLineColor(\"hex\");",
               "return":"String",
               "explane":"Un metodo semplice per ottenere il colore nel formato specificato."
            },
            "getLineColor":{
               "description":"Restituisce il colore alla linea di contorno dell'oggetto.",
               "default":"",
               "constructor":"getLineColor( string)",
               "note":"",
               "type":"Function",
               "id":"metgetlinecolor",
               "param":"Un valore a piacere nei seguenti formati: rgb, hsl, hsv, hex o name.",
               "example":"myObject.getLineColor(\"hsv\");",
               "return":"String",
               "explane":"Un metodo semplice per ottenere il colore nel formato specificato."
            },
            "loadImage":{
               "description":"Gestisce il caricamento asincrono dell'immagine.",
               "default":"",
               "constructor":"myObject.loadImage( source, progressfunction, completefunction, show)",
               "note":"",
               "type":"Function",
               "id":"metloadimage",
               "param":"La sorgente dell'immagine in genere la proprietà stessa dell'oggetto(myObject.source}. Come valori opzionali due funzioni per gestire il monitoraggio del caricamento ed il completamento; e un valore booleano che determina se, o meno, disegnare l'iimagine non appena terminato il caricamneto.",
               "example":"myObject.loadImage(myObject.source,function,function,boolean);",
               "return":"void",
               "explane":"Il metodo è applicabile per i costruttori <a href=\"#conimg\">img</a> e <a href=\"#conclip\">clip</a>."
            }
         },
         "constructor":{
            "rect":{
               "description":"Costruisce un semplice rettangolo.",
               "constructor":"rect( x, y, width, height, color, linecolor, linewidth)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conrect",
               "param":"La posizione locale delle coordinate x y, larghezza, altezza. Come valori opzionali colore, colore della linea e spessore della linea se presente.",
               "example":"var myRect=new Canvas2d.DisplayObjects(\"rect_0\"); myRect.rect(0,0,100,100,color,linecolor,linewidth);",
               "return":"void",
               "explane":"Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "rectRound":{
               "description":"Costruisce un rettangolo con bordi arrotondati.",
               "constructor":"rectRound( x, y, width, height, radius, color, linecolor, linewidth)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conrectround",
               "param":"La posizione locale delle coordinate x y, larghezza, altezza e l'ampiezza degli angoli. Come valori opzionali colore, colore della linea e spessore della linea se presente.",
               "example":"var myRectRound=new Canvas2d.DisplayObjects(\"round_rect_0\"); myRectRound.rectRound(0,0,100,100,10,color,linecolor,linewidth);",
               "return":"void",
               "explane":"Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "line":{
               "description":"Costruisce una linea.",
               "constructor":"line( x, y, x0, y0, x1, y1, linecolor, linewidth, linecap, linejoin, linemiter)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conline",
               "param":"La posizione locale delle coordinate x y, x0 y0 le coordinate di inizio della linea rispetto alle sue coordinate locali x y, x1 y1 le coordinate finali della linea rispetto alle sue coordinate locali x y. Come valori opzionali colore della linea e spessore della linea, la posizione terminale della linea, il tipo di forma del terminale della line e lo spessore terminale della linea.",
               "example":"var myLine=new Canvas2d.DisplayObjects(\"line_0\"); myLine.line(0,0,-10,-10,10,10,linecolor,linewidth,linecap,linejoin,linemiter);",
               "return":"void",
               "explane":""
            },
            "circle":{
               "description":"Costruisce un cerchio.",
               "constructor":"circle( x, y, radius, startangle, endangle, color, linecolor, linewidth)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"concircle",
               "param":"La posizione locale delle coordinate x y, larghezza, altezza, l'ampiezza del raggio, il valore in radianti per la partenza dell'arco ed il valore in radianti per il termine dell'arco. Come valori opzionali colore, colore della linea e spessore della linea se presente.",
               "example":"var myCircle=new Canvas2d.DisplayObjects(\"circle_0\"); myCircle.circle(0,0,20,0,Math.PI*2,color,linecolor,linewidth);",
               "return":"void",
               "explane":"Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "polygon":{
               "description":"Costruisce un poligono regolare.",
               "constructor":"polygon( x, y, points, color, linecolor, linewidth)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conpolygon",
               "param":"La posizione locale delle coordinate x y e un oggetto che conterra una lista di coordinate. Come valori opzionali colore, colore della linea e spessore della linea se presente.",
               "example":"var myPolygon=new Canvas2d.DisplayObjects(\"poly_0\"); points=[[0,0], [50,100], [-50,100], [0,0]]; myPolygon.polygon(0,0,points,color,linecolor,linewidth);",
               "return":"void",
               "explane":"L'oggetto risultante dalla lista \"points\" verrà chiuso utilizzando l'ultimo valore fornito. Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "shape":{
               "description":"Costruisce una forma personalizzata.",
               "constructor":"shape( x, y, obj, color, linecolor, linewidth)",
               "default":"undefined",
               "note":"I metodi utilizzati nella lista \"obj\" sono: moveTo, lineTo, quadraticCurveTo, bezierCurveTo ed arcTo (non supportato da Opera).",
               "type":"Function",
               "id":"conshape",
               "param":"La posizione locale delle coordinate x y e obj una lista di oggetti con chiave valore che determineranno direttamente il tipo di disegno e le relative coordinate. Come valori opzionali colore, colore della linea e spessore della linea se presente.",
               "example":"var myShape=new Canvas2d.DisplayObjects(\"shape_0\"); obj=[{'moveTo':[50,0]}, {'quadraticCurveTo':[25,50,0,50]}, {'bezierCurveTo':[25,40,25,20,0]}, {'lineTo':[50,0]}]; myShape.shape(0,0,obj,color,linecolor,linewidth);",
               "return":"void",
               "explane":"L'oggetto risultante dalla lista \"points\" verrà chiuso utilizzando l'ultimo valore fornito. Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "text":{
               "description":"Costruisce una linea di testo.",
               "constructor":"text( txt, x, y, fontweight, fontsize, fonttype, color, background, align, baseline)",
               "default":"undefined",
               "note":"I valori accettati per \"align\" e \"baseline\" sono rispettivamente: align( start, end, left, right, center), baseline( top, hanghing, middle, alphabetic, ideographic, bottom).<div style=\"text-align:center;padding: 8px 0px 6px 0px;\"><img src=\"img/baselines3.jpg\"/></div>",
               "type":"Function",
               "id":"context",
               "param":"Una stringa di testo, la posizione locale delle coordinate x y, il tipo di stile del carattere, la dimensione del carattere in pixel e la famiglia del font. Come valori opzionali colore, un oggetto background che conterra il colore di fondo il colore della linea e lo spessore della linea se presente, il tipo di allineamento orizzontale ed il tipo di allineamento verticale.",
               "example":"var myText=new Canvas2d.DisplayObjects(\"shape_0\"); background={'color':'white','lineColor':'rgb(0,0,0}','lineWidth':4); myText.text('qualcosa da scrivere',0,0,'bold',16,'Verdana, Times',color,background,'center','alphabetic');",
               "return":"void",
               "explane":"Se i valori per linecolor e linewidth non sono presenti, l'oggetto verrà disegnato senza una linea di contorno, solo con colore di riempimento. Per ottenere una linea senza il riempimento basterà assegnare null al colore di riempimento."
            },
            "img":{
               "description":"Costruisce un'immagine.",
               "constructor":"img( x, y, source, show, color, paddingleft, paddingtop)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conimg",
               "param":"La posizione locale delle coordinate x y e la sorgente dell'immagine che potrà essere un oggetto HTML Image element o una stringa. Come valori opzionali un booleano che determina se si desidera disegnare l'immagine non appena verrà caricata l'immagine o gestirne il caricamento tramite il metodo <a href=\"#metloadimage\">loadImage</a>; il colore di fondo e l'offset sia orizzontale che verticale con; paddingleft e paddingtop.",
               "example":"var myImg=new Canvas2d.DisplayObjects(\"img_0\"); myImg.img(0,0,\"img/target_to_my_image.jpg\",true,color,paddingleft,paddingtop);",
               "return":"void",
               "explane":"Se il valore di color non è presente, l'oggetto verrà disegnato senza un colore di riempimento per il fondo."
            },
            "clip":{
               "description":"Costruisce un'oggetto con immagini multiple.",
               "constructor":"img( x, y, source, framelist, show)",
               "default":"undefined",
               "note":"",
               "type":"Function",
               "id":"conclip",
               "param":"La posizione locale delle coordinate x y e la sorgente dell'immagine che potrà essere un oggetto HTML Image element o una stringa. Come valori opzionali un'oggetto che conterrà le informazioni di ritaglio dell'immagine principale e un booleano che determina se si desidera disegnare l'immagine non appena verrà caricata l'immagine o gestirne il caricamento tramite il metodo <a href=\"#metloadimage\">loadImage</a>.",
               "example":"var myClip=new Canvas2d.DisplayObjects(\"clip_0\"); var framelist=[{'x':0,'y':0,'map':{'x':10,'y':10,'width':25,'height':30},{'x':0,'y':0,'map':{'x':10,'y':40,'width':25,'height':30},{etc..}]; myClip.clip('img/image1.jpg',framelist,true);",
               "return":"void",
               "explane":"Per gestire il frame(ritaglio dell'immagine} fare riferimento alla proprietà <a href=\"#propcurrentframe\">currentframe</a>. Sarà possibile impostare un colore di fondo, l'offset sia orizzontale che verticale con; paddingleft e paddingtop ed un colore per la linea."
            }
         }
      },
      "tweener":{
         "object properties":{
            "duration":{
               "description":"Indica la durata della transizione in millisecondi.",
               "constructor":"",
               "default":"0",
               "note":"",
               "type":"Number",
               "id":"produrationt",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "delay":{
               "description":"Indica il ritardo della transizione in millisecondi.",
               "constructor":"",
               "default":"0",
               "note":"",
               "type":"Number",
               "id":"prodelay",
               "param":"",
               "example":"",
               "return":"",
               "explane":""
            },
            "ease":{
               "description":"Indica il tipo di andamento della transizione.",
               "constructor":"",
               "default":"easeNone",
               "note":"",
               "type":"String",
               "id":"proease",
               "param":"",
               "explane":"",
               "return":"",
               "example":"I valori disponibili sono: 'easeNone', 'easeInQuad', 'easeOutQuad', 'easeInOutQuad', 'easeOutInQuad', 'easeInCubic', 'easeOutCubic', 'easeInOutCubic', 'easeOutInCubic', 'easeInQuart', 'easeOutQuart', 'easeInOutQuart', 'easeOutInQuart', 'easeInQuint', 'easeOutQuint', 'easeInOutQuint', 'easeOutInQuint', 'easeInSine', 'easeOutSine', 'easeInOutSine', 'easeOutInSine', 'easeInExpo', 'easeOutExpo', 'easeInOutExpo', 'easeOutInExpo', 'easeInCirc', 'easeOutCirc', 'easeInOutCirc', 'easeOutInCirc', 'easeInElastic', 'easeOutElastic', 'easeInOutElastic', 'easeOutInElastic', 'easeInBack', 'easeOutBack', 'easeInOutBack', 'easeOutInBack', 'easeInBounce', 'easeOutBounce', 'easeInOutBounce', 'easeOutInBounce'."
            },
            "onStart":{
               "description":"Indica la funzione da eseguire alla partenza della transizione.",
               "constructor":"myTween.addTweener(myObj,{properties...,onStart:myFunction});",
               "default":"null",
               "note":"",
               "type":"Function",
               "id":"proonstart",
               "param":"",
               "example":"",
               "return":"",
               "explane":"La funzione passa l'oggetto target come parametro."
            },
            "onTween":{
               "description":"Indica la funzione da eseguire durante la transizione.",
               "constructor":"myTween.addTweener(myObj,{properties...,onTween:myFunction});",
               "default":"null",
               "note":"",
               "type":"Function",
               "id":"proontween",
               "param":"",
               "example":"",
               "return":"",
               "explane":"La funzione passa l'oggetto target come parametro."
            },
            "onEnd":{
               "description":"Indica la funzione da eseguire alla partenza della transizione.",
               "constructor":"myTween.addTweener(myObj,{properties...,onEnd:myFunction});",
               "default":"null",
               "note":"",
               "type":"Function",
               "id":"proonend",
               "param":"",
               "example":"",
               "return":"",
               "explane":"La funzione passa l'oggetto target come parametro."
            }
         },
         "methods":{
            "getFrame":{
               "description":"Restituisce il numero corrente di frame, o di battute, eseguite.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgetframe",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getTime":{
               "description":"Restituisce il tempo corrente generato da un oggetto 'Date.getTime()', ad ogni battuta, ovvero, ogni volta che la funzione in loop viene eseguita.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgettime",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getFps":{
               "description":"Restituisce il numero di fotogrammi al secondo attualmente disponibili.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgetfps",
               "param":"",
               "example":"",
               "return":"Number",
               "explane":""
            },
            "getTimeInterval":{
               "description":"Restituisce l'effetiva differenza tra il tempo corrente ed il tempo attuale.",
               "default":"",
               "constructor":"",
               "note":"Il metodo utilizza 'RequestAnimationFrame'.",
               "type":"Function",
               "id":"metgettimeinterval",
               "param":"",
               "example":"timeInterval=(thisTime-lastTime)",
               "return":"Number",
               "explane":""
            },
            "addTweener":{
               "description":"Aggiunge un oggetto Sprite o DisplayObjects nella lista di transizioni.",
               "default":"",
               "constructor":"myTweener.addTweener(target,{parameters..,duration});",
               "note":"",
               "type":"Function",
               "id":"metaddtweener",
               "param":"",
               "example":"myTween.addTweener(myObj,{x:120,y:200,duration:2000,ease:'easeNone'});",
               "return":"Void",
               "explane":"La transizione viene avviata non appena il metodo è dichiarato."
            },
            "removeTweener":{
               "description":"Rimuove un elemento precedentemente inserito nella lista delle transizioni.",
               "default":"",
               "constructor":"myTweener.removeTweener(target);",
               "note":"",
               "type":"Function",
               "id":"metremovetweener",
               "param":"",
               "example":"myTweener.removeTweener(myObj);",
               "return":"Void",
               "explane":""
            }
         }
      },
      "colors":{
         "methods":{
            "Rgb":{
               "description":"Converte un colore con valore esadecimale Hex in un array r,g,b.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"metrgb",
               "param":"",
               "example":"Colors.Rgb('#FF00CC');",
               "return":"Array",
               "explane":""
            },
            "Hex":{
               "description":"Converte un array formato r,g,b in Hex string.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"methex",
               "param":"",
               "example":"Colors.Hex([255,120,0]);",
               "return":"Hex String",
               "explane":""
            },
            "RgbToHsl":{
               "description":"Converte un valore formato r,g,b in array hsl.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"metrgbtohsl",
               "param":"",
               "example":"Colors.RgbToHsl(255,120,0);",
               "return":"Array",
               "explane":""
            },
            "HslToRgb":{
               "description":"Converte un vaolre formato h,s,l in array rgb.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"methsltorgb",
               "param":"",
               "example":"Colors.HslToRgb(120,50,50);",
               "return":"Array",
               "explane":""
            },
            "RgbToHsv":{
               "description":"Converte un valore formato r,g,b in array hsv.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"metrgbtohsv",
               "param":"",
               "example":"Colors.RgbToHsv(255,120,0);",
               "return":"Array",
               "explane":""
            },
            "HsvToRgb":{
               "description":"Converte un valore formato r,g,b in array hsv.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"methsvtorgb",
               "param":"",
               "example":"Colors.HsvToRgb(120,50,50);",
               "return":"Array",
               "explane":""
            },
            "ParseColor":{
               "description":"Converte una stringa formato hex, hsl, hsv, name o rgb in una stringa formato rgb.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"metparsecolor",
               "param":"",
               "example":"Colors.ParseColor('hsl(120,50,50}');",
               "return":"String",
               "explane":""
            },
            "RandomRgb":{
               "description":"Genera un valore rgb casuale in array o stringa, a seconda del tipo scelto.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Function",
               "id":"metrandomrgb",
               "param":"",
               "example":"Colors.RandomRgb('string');",
               "return":"Array or String",
               "explane":""
            },
            "namedColor":{
               "description":"Una lista di 646 colori suddivisi per nome, valore hex ed array rgb.",
               "constructor":"",
               "default":"",
               "note":"",
               "type":"Object",
               "id":"metnamedcolor",
               "param":"",
               "example":"Colors.namedColor['blue']; return {'blue':['#0000ff',[0,0,255]])",
               "return":"",
               "explane":""
            }
         }
      },
      "events":{
         "event object properties":{
            "target":{
               "description":"Indica l'oggetto associato all'evento.",
               "constructor":"",
               "default":"undefined",
               "note":"",
               "type":"Object",
               "id":"proptarget",
               "param":"Target è il riferimento diretto dell'oggetto associato all'evento, dunque sarà possibile accedere a tutte le proprietà e metodi ad esso correlati.",
               "example":"function(e}{ console.log(e.target} )",
               "return":"Object",
               "explane":""
            },
            "mouse":{
               "description":"Indica l'oggetto generato dall'azione del mouse.",
               "constructor":" mouse={ x:number, y:number, ox:number, oy:number, gx:number, gy:number, scaleX:number, scaleY:number, rotation:number, 'gesture':scale:number, angle:number)",
               "default":"undefined",
               "note":"",
               "type":"Object",
               "id":"propmouse",
               "param":"L'oggetto mouse contiene tutti le informazioni relative alla posizione del mouse per le coordinate assolute, globali e locali dell'oggeto target associato all'evento.",
               "example":"function(e}{ //proprietà di mouse; e.mouse.x //La coordinata orizzontale assoluta; e.mouse.y //La coordinata verticale assoluta; //Molto utili nel caso di un evento 'drag' mouse.ox e mouse.oy; example: e.target.x=e.mouse.ox; e.mouse.ox //La coordinata orizzontale locale tradotta nella assoluta; e.mouse.oy //La coordinata verticale tradotta nella assoluta; e.mouse.gx //La coordinata orizzontale globale tradotta in assoluta; e.mouse.gy //La coordinata verticale globale tradotta in assoluta; e.mouse.scaleX //La scala orizzontale locale tradotta in assoluta; e.mouse.scaleY //La scala verticale locale tradotta in assoluta; e.mouse.rotation //La rotazione locale tradotta in assoluta; //Nel caso di un evento 'gesture' conterra; e.mouse.scale //Il rapporto tra i due punti generati da un evento 'gesture' - touches[0] e touches[1]; e.mouse.angle //Angolazione in radianti; e.mouse2 //Nel caso di un evento gesture conterrà tutti gli elementi di mouse relativi al secondo punto di interresse;",
               "return":"Object",
               "explane":""
            },
            "type":{
               "description":"Indica il tipo di evento.",
               "constructor":"",
               "default":"undefined",
               "note":"",
               "type":"Object",
               "id":"proptype",
               "param":"",
               "example":"I possibili tipi di evento sono: 'mousedown', 'mouseup', 'click', 'mousemove', 'mouseover', 'mouseout', 'dragstart', 'drag', 'dragstop','touchstart', 'touchmove', 'touchend', 'gesturestart', 'gesturechange', 'gestureend'",
               "return":"",
               "explane":""
            },
            "event":{
               "description":"Indica l'evento generato.",
               "constructor":"",
               "default":"undefined",
               "note":"",
               "type":"Event",
               "id":"propevent",
               "param":"",
               "example":"",
               "return":"Object",
               "explane":""
            }
         }
      }
   }
}